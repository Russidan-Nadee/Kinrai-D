generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FoodType {
  id           Int                   @id @default(autoincrement())
  key          String                @unique
  is_active    Boolean               @default(true)
  created_at   DateTime              @default(now())
  updated_at   DateTime              @updatedAt
  Categories   Category[]
  Translations FoodTypeTranslation[]

  @@map("food_types")
}

model FoodTypeTranslation {
  id           Int      @id @default(autoincrement())
  food_type_id Int
  language     String
  name         String
  description  String?
  FoodType     FoodType @relation(fields: [food_type_id], references: [id])

  @@unique([food_type_id, language])
  @@index([language])
  @@map("food_type_translations")
}

model Category {
  id            Int                   @id @default(autoincrement())
  food_type_id  Int
  key           String                @unique
  is_active     Boolean               @default(true)
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  FoodType      FoodType              @relation(fields: [food_type_id], references: [id])
  Translations  CategoryTranslation[]
  Subcategories Subcategory[]

  @@index([food_type_id])
  @@map("categories")
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  category_id Int
  language    String
  name        String
  description String?
  Category    Category @relation(fields: [category_id], references: [id])

  @@unique([category_id, language])
  @@index([language])
  @@map("category_translations")
}

model Subcategory {
  id           Int                      @id @default(autoincrement())
  category_id  Int
  key          String                   @unique
  is_active    Boolean                  @default(true)
  created_at   DateTime                 @default(now())
  updated_at   DateTime                 @updatedAt
  Menus        Menu[]
  Category     Category                 @relation(fields: [category_id], references: [id])
  Translations SubcategoryTranslation[]

  @@index([category_id])
  @@map("subcategories")
}

model SubcategoryTranslation {
  id             Int         @id @default(autoincrement())
  subcategory_id Int
  language       String
  name           String
  description    String?
  Subcategory    Subcategory @relation(fields: [subcategory_id], references: [id])

  @@unique([subcategory_id, language])
  @@index([language])
  @@map("subcategory_translations")
}

model ProteinType {
  id           Int                      @id @default(autoincrement())
  key          String                   @unique
  is_active    Boolean                  @default(true)
  created_at   DateTime                 @default(now())
  updated_at   DateTime                 @updatedAt
  Menus        Menu[]
  Translations ProteinTypeTranslation[]

  @@map("protein_types")
}

model ProteinTypeTranslation {
  id              Int         @id @default(autoincrement())
  protein_type_id Int
  language        String
  name            String
  ProteinType     ProteinType @relation(fields: [protein_type_id], references: [id])

  @@unique([protein_type_id, language])
  @@index([language])
  @@map("protein_type_translations")
}

model Menu {
  id              Int               @id @default(autoincrement())
  subcategory_id  Int
  protein_type_id Int?
  image_url       String?
  contains        Json
  meal_time       MealTime
  is_active       Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Favorites       FavoriteMenu[]
  Ratings         MenuRating[]
  ProteinType     ProteinType?      @relation(fields: [protein_type_id], references: [id])
  Subcategory     Subcategory       @relation(fields: [subcategory_id], references: [id])
  UserDislikes    UserDislike[]

  @@unique([subcategory_id, protein_type_id])
  @@index([subcategory_id])
  @@index([protein_type_id])
  @@index([meal_time])
  @@map("menus")
}


model DietaryRestriction {
  id                      Int                             @id @default(autoincrement())
  key                     String                          @unique
  is_active               Boolean                         @default(true)
  created_at              DateTime                        @default(now())
  updated_at              DateTime                        @updatedAt
  Translations            DietaryRestrictionTranslation[]
  UserDietaryRestrictions UserDietaryRestriction[]

  @@map("dietary_restrictions")
}

model DietaryRestrictionTranslation {
  id                     Int                @id @default(autoincrement())
  dietary_restriction_id Int
  language               String
  name                   String
  description            String?
  DietaryRestriction     DietaryRestriction @relation(fields: [dietary_restriction_id], references: [id])

  @@unique([dietary_restriction_id, language])
  @@index([language])
  @@map("dietary_restriction_translations")
}

model UserDietaryRestriction {
  id                     Int                @id @default(autoincrement())
  user_profile_id        String             @db.Uuid
  dietary_restriction_id Int
  DietaryRestriction     DietaryRestriction @relation(fields: [dietary_restriction_id], references: [id])
  UserProfile            UserProfile        @relation(fields: [user_profile_id], references: [id])

  @@unique([user_profile_id, dietary_restriction_id])
  @@index([user_profile_id])
  @@index([dietary_restriction_id])
  @@map("user_dietary_restrictions")
}

model UserProfile {
  id                      String                   @id @db.Uuid
  email                   String                   @unique
  name                    String?
  phone                   String?
  role                    UserRole                 @default(USER)
  is_active               Boolean                  @default(true)
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  Favorites               FavoriteMenu[]
  Ratings                 MenuRating[]
  UserDietaryRestrictions UserDietaryRestriction[]
  UserDislikes            UserDislike[]

  @@index([email])
  @@index([role])
  @@map("user_profiles")
}

model UserDislike {
  id              Int         @id @default(autoincrement())
  user_profile_id String      @db.Uuid
  menu_id         Int
  reason          String?
  created_at      DateTime    @default(now())
  Menu            Menu        @relation(fields: [menu_id], references: [id])
  UserProfile     UserProfile @relation(fields: [user_profile_id], references: [id])

  @@unique([user_profile_id, menu_id])
  @@index([user_profile_id])
  @@index([menu_id])
  @@map("user_dislikes")
}

model FavoriteMenu {
  id              Int         @id @default(autoincrement())
  user_profile_id String      @db.Uuid
  menu_id         Int
  created_at      DateTime    @default(now())
  Menu            Menu        @relation(fields: [menu_id], references: [id])
  UserProfile     UserProfile @relation(fields: [user_profile_id], references: [id])

  @@unique([user_profile_id, menu_id])
  @@index([user_profile_id])
  @@index([menu_id])
  @@map("favorite_menus")
}

model MenuRating {
  id              Int         @id @default(autoincrement())
  user_profile_id String      @db.Uuid
  menu_id         Int
  rating          Int
  review          String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  Menu            Menu        @relation(fields: [menu_id], references: [id])
  UserProfile     UserProfile @relation(fields: [user_profile_id], references: [id])

  @@unique([user_profile_id, menu_id])
  @@index([user_profile_id])
  @@index([menu_id])
  @@map("menu_ratings")
}

enum MealTime {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}
