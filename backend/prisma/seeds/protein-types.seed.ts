import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const proteinTypeSeedData = [
  {
    key: 'chicken',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Chicken',
      },
      {
        language: 'th',
        name: '‡πÑ‡∏Å‡πà',
      },
      {
        language: 'jp',
        name: 'È∂èËÇâ',
      },
      {
        language: 'zh',
        name: 'È∏°ËÇâ',
      },
    ],
  },
  {
    key: 'pork',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Pork',
      },
      {
        language: 'th',
        name: '‡∏´‡∏°‡∏π',
      },
      {
        language: 'jp',
        name: 'Ë±öËÇâ',
      },
      {
        language: 'zh',
        name: 'Áå™ËÇâ',
      },
    ],
  },
  {
    key: 'beef',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Beef',
      },
      {
        language: 'th',
        name: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß',
      },
      {
        language: 'jp',
        name: 'ÁâõËÇâ',
      },
      {
        language: 'zh',
        name: 'ÁâõËÇâ',
      },
    ],
  },
  {
    key: 'seafood',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Seafood',
      },
      {
        language: 'th',
        name: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•',
      },
      {
        language: 'jp',
        name: '„Ç∑„Éº„Éï„Éº„Éâ',
      },
      {
        language: 'zh',
        name: 'Êµ∑È≤ú',
      },
    ],
  },
  {
    key: 'vegetarian',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Vegetarian',
      },
      {
        language: 'th',
        name: '‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥',
      },
      {
        language: 'jp',
        name: '„Éô„Ç∏„Çø„É™„Ç¢„É≥',
      },
      {
        language: 'zh',
        name: 'Á¥†È£ü',
      },
    ],
  },
  {
    key: 'vegan',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Vegan',
      },
      {
        language: 'th',
        name: '‡πÄ‡∏à',
      },
      {
        language: 'jp',
        name: '„É¥„Ç£„Éº„Ç¨„É≥',
      },
      {
        language: 'zh',
        name: 'Á∫ØÁ¥†',
      },
    ],
  },
  {
    key: 'duck',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Duck',
      },
      {
        language: 'th',
        name: '‡πÄ‡∏õ‡πá‡∏î',
      },
      {
        language: 'jp',
        name: 'È¥®ËÇâ',
      },
      {
        language: 'zh',
        name: 'È∏≠ËÇâ',
      },
    ],
  },
  {
    key: 'mixed_protein',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Mixed Protein',
      },
      {
        language: 'th',
        name: '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏£‡∏ß‡∏°',
      },
      {
        language: 'jp',
        name: '„Éü„ÉÉ„ÇØ„Çπ„Éó„É≠„ÉÜ„Ç§„É≥',
      },
      {
        language: 'zh',
        name: 'Ê∑∑ÂêàËõãÁôΩ',
      },
    ],
  },
  {
    key: 'shrimp',
    is_active: true,
    translations: [
      {
        language: 'en',
        name: 'Shrimp',
      },
      {
        language: 'th',
        name: '‡∏Å‡∏∏‡πâ‡∏á',
      },
      {
        language: 'jp',
        name: '„Ç®„Éì',
      },
      {
        language: 'zh',
        name: 'Ëôæ',
      },
    ],
  },
];

export async function seedProteinTypes() {
  console.log('ü•© Seeding protein types...');
  
  for (const proteinType of proteinTypeSeedData) {
    const existingProteinType = await prisma.proteinType.findUnique({
      where: { key: proteinType.key },
    });

    if (existingProteinType) {
      console.log(`‚ö†Ô∏è  Protein type already exists: ${proteinType.key}`);
      continue;
    }

    const createdProteinType = await prisma.proteinType.create({
      data: {
        key: proteinType.key,
        is_active: proteinType.is_active,
        Translations: {
          create: proteinType.translations,
        },
      },
      include: {
        Translations: true,
      },
    });
    
    console.log(`‚úÖ Created protein type: ${createdProteinType.key}`);
  }
  
  console.log('üéâ Protein types seeding completed!');
}

// Run if this file is executed directly
if (require.main === module) {
  seedProteinTypes()
    .then(async () => {
      await prisma.$disconnect();
    })
    .catch(async (e) => {
      console.error('‚ùå Error seeding protein types:', e);
      await prisma.$disconnect();
      process.exit(1);
    });
}